The paper presents a comparative evaluation of programming paradigms and languages in multithreaded programming, showing that pure parallelism was more effective than combined parallelism, and that the procedural paradigm in C++ outperformed the object-oriented paradigm, with Java generally having shorter response times than object-oriented C++ in multithreaded implementations.
[1] Penha, Dulcinéia Oliveira da et al. “Performance evaluation of programming paradigms and languages using multithreading on digital image processing.” (2005).
The paper discusses the importance of multithreading in programming, surveys research on analyzing multithreaded programs, identifies two classes of multithreaded programs with different solution approaches, and suggests augmented type systems for activity management programs and targeted program analyses for parallel computing programs.
[2] Rinard, Martin C.. “Analysis of Multithreaded Programs.” Sensors Applications Symposium (2001).
The paper presents an experiment comparing four popular approaches to parallel programming, providing insights into the strengths and weaknesses of each approach, facilitating an informed selection of a language based on specific requirements. The study methodology involves obtaining reference implementations through expert review, leading to a robust comparative analysis of usability and performance, ultimately aiming to assist developers in choosing the most suitable language for their needs.
[3] Nanz, Sebastian et al. “Benchmarking Usability and Performance of Multicore Languages.” 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (2013): 183-192.
The paper provides an overview of language support for parallel technical computing, discussing the rationale for multithreaded languages, general models for manipulating multiple threads, features for creating and synchronizing threads, and less traditional approaches for future languages and compilers.
[4] Pancake, Cherri M.. “Multithreaded languages for scientific and technical computing.” Proc. IEEE 81 (1993): 288-304.
The paper critically examines multithreading, its performance gains, limitations in current networks, proposes compiler-controlled multithreading, and illustrates the approach with Split-C language and TAM compilation methodology.
[5] Culler, David E.. “Multithreading: Fundamental Limits, Potential Gains, and Alternatives.” Multithreaded Computer Architecture (1994).
The paper discusses the challenges of multithreaded programming due to random interleaving, introduces a novel deterministic property for multithreading, and presents experimental results on applying the analysis to benchmarks, aiming to overcome the limitations of static analysis in multithreaded programs.
[6] Ferrara, Pietro. “Static Analysis of the Determinism of Multithreaded Programs.” 2008 Sixth IEEE International Conference on Software Engineering and Formal Methods (2008): 41-50.
The paper presents a new combined pointer and escape analysis for multithreaded programs, including unstructured forms of multithreading, based on parallel interaction graphs, with applications in compiler optimizations, software engineering, and program analysis. The analysis eliminates region reference checks and unnecessary synchronizations, providing safety guarantees and optimization opportunities for programs using region-based allocation constructs.
[7] Salcianu, Alexandru and Martin C. Rinard. “Pointer and escape analysis for multithreaded programs.” ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming (2001).
The paper explores program analysis for multithreaded software using constraint solving to achieve accurate and exhaustive coverage of all thread interleavings, demonstrating formalization of sequential consistency and proposing applications like execution validation and race detection. An implementation of a formal analysis tool using constraint logic programming is described with promising results for reasoning about concurrent programs.
[8] Yang, Yue et al. “Rigorous Concurrency Analysis of Multithreaded Programs.” (2003). 
The paper presents a novel interprocedural, flow-sensitive, and context-sensitive pointer analysis algorithm for multithreaded programs, demonstrating good precision and quick convergence in analyzing a set of Cilk multithreaded programs.
[9] Rugina, Radu and Martin C. Rinard. “Pointer analysis for multithreaded programs.” ACM-SIGPLAN Symposium on Programming Language Design and Implementation (1999).
The paper examines languages and libraries for multithreaded programming in Java and C++, focusing on developing concurrent programming skills, problem-solving skills, testing, and debugging techniques, while covering relevant aspects of Java, POSIX Pthreads, and Windows Win32 API.
[10] Carver, Richard H. and Kuo-chung Tai. “Modern Multithreading : Implementing, Testing, and Debugging Multithreaded Java and C++/Pthreads/Win32 Programs.” (2005).
The paper discusses multithreading as a strategy to tolerate latency on multiprocessors, presents an analytical model considering cache degradation, and emphasizes the importance of the context switch overhead to remote reference interval ratio in multithreaded architectures.
[11] Saavedra, Rafael H. et al. “Analysis of multithreaded architectures for parallel computing.” ACM Symposium on Parallelism in Algorithms and Architectures (1990).
The paper explores compiler-controlled multithreading for efficient multithreaded execution in non-strict parallel languages, using a new parallel intermediate form and showing comparable costs to sequential languages.
[12] Schauser, Klaus E. et al. “Compiler-Controlled Multithreading for Lenient Parallel Languages.” Conference on Functional Programming Languages and Computer Architecture (1991).
The paper presents a reference implementation of a multi-threaded run-time system for a core programming language based on a process calculus, featuring processes running in parallel and communicating through asynchronous messages in a declarative programming style, with the parallelism effectively extracted by the language compiler and explored by the run-time system.
[13] Paulino, Hervé et al. “A Multi-threaded Asynchronous Language.” International Conference on Parallel Architectures and Compilation Techniques (2003).
The paper explores the benefits of concurrent programming for creating fast responsive systems with low overhead, comparing sequential and concurrent implementations of Bucket Sort to investigate performance factors and design considerations.
[14] Jeong, Chanki and Mohammad Mehdi Shahsavari. “Performance evaluation of multithreading in concurrent programs.” Proceedings IEEE SoutheastCon 2002 (Cat. No.02CH37283) (2002): 7-9.
The paper discusses the significance of multithreading in enhancing program performance on the Java 2 platform and serves as a comprehensive guide to multithreaded development, offering insights into thread structures, construction, life cycles, and practical examples.
[15] Lewis, Bil and Daniel J. Berg. “Multithreaded Programming with Java Technology.” (1999).
The paper describes the design and implementation of a C++ class library for timesliced multithreading capabilities, which is adaptable to different systems and freely available for download.
[16] English, John. “Multithreading in C++.” ACM SIGPLAN Notices 30 (1995): 21-28.
The paper discusses the development of efficient and scalable multithreaded programs on various platforms, emphasizing the importance of multithreading for software developers to enhance performance in operating systems, providing techniques on managing and synchronizing threads, creating portable multithreading programs, and converting single-threaded applications to multithreaded ones. It covers the use of threads for scalability, parallelism in SMP machines, inter-thread synchronization, and conversion between different thread implementations and standards.
[17] Prasad, S. Mohana. “Multithreading Programming Techniques.” (1997).
The paper discusses the benefits of multithreading in boosting system performance, optimizing applications for Pentium dual core, converting non-threaded programs into multithreaded applications, and the advantages of combining model-driven development with multithreading.
[18] Shanthi, Mrs. M. and Dr. A. Anthony Irudhayaraj. “of Recent Trends in Engineering , Vol 2 , No . 4 , November 2009 165 Multithreading-An Efficient Technique for Enhancing Application Performance.” (2009).
The paper presents StackThreads as a cost-effective implementation strategy for multithreading languages to efficiently create and switch threads within the constraints of current C compilers, allowing for straightforward translation of source language constructs into C statements.
[19] Taura, Kenjiro and Akinori Yonezawa. “Fine-grain multithreading with minimal compiler support—a cost effective approach to implementing efficient multithreading languages.” ACM-SIGPLAN Symposium on Programming Language Design and Implementation (1997).
The paper discusses the major challenges, current practices, and languages/tools supporting multithreaded programming technologies and applications.
[20] Lin, Yuan. “Multithreaded programming challenges, current practice, and languages/tools support.” 2006 IEEE Hot Chips 18 Symposium (HCS) (2006): 1-134.
The paper discusses simultaneous multithreading and its benefits in increasing processor utilization, achieving higher throughput, and improving response times in a multiprogrammed environment, presenting an architecture that enhances performance significantly.
[21] Tullsen, Dean M.. “Simultaneous multithreading.” (1996).
The paper presents compiler and program transformation techniques for the superthreaded architecture to exploit parallelism in programs with less runtime overhead, showing promising speedups in benchmark programs.
[22] Tsai, Jenn-Yuan et al. “Program Optimization for Concurrent Multithreaded Architectures.” International Workshop on Languages and Compilers for Parallel Computing (1997).
The paper discusses the study of a superthreading architectural model that integrates optimizing compilation techniques and run-time hardware support to exploit both thread-level and instruction-level parallelism, achieving good performance by overlapping threads and enforcing data dependence. Design parameters of system components are also evaluated.
[23] Tsai, Jenn-Yuan et al. “Performance study of a concurrent multithreaded processor.” Proceedings 1998 Fourth International Symposium on High-Performance Computer Architecture (1998): 24-35.
The paper discusses a multithreaded architecture that exploits both coarse-grain and fine-grain parallelism, utilizes instruction-level parallelism, supports multiple resident activations, and implements a distributed data structure cache to enhance performance and reduce network latency.
[24] Kim, Yoon Ho et al. “Design and performance evaluation of a multithreaded architecture.” Proceedings of 1995 1st IEEE Symposium on High Performance Computer Architecture (1995): 298-307.


write literature review for a research paper according to the summary of multiple papers given above, each paragraph belongs to a separate paper cite the papers by [1] [2] [3] accordingly


